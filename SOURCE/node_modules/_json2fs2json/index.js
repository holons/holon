var fs       = require('fs')
var p        = require('path')
var traverse = require('traverse')
var getval   = require('getval')
var touch    = require('touch')
var mkdirp   = require('mkdirp')
var rimraf   = require('rimraf')
var stind    = require('strip-indent')

function txt (string) { return stind(string) }

var transforms = {
  md: txt, MD: txt, markdown: txt,
  txt: txt, TXT: txt,
  js: txt, JS: txt,
  HTML: txt, html: txt, htm: txt,
  css: txt, CSS: txt,
  gitignore: txt,
  json: txt, JSON: txt
}

module.exports = { json2fs: json2fs, fs2json: fs2json }

function json2fs (rootpath, json, callback) {
  rootpath = p.join('./', rootpath)
  if (rootpath.indexOf('..') !== -1) {
    callback(IllegalRootError(rootpath))
  } else {
    fs.open(rootpath,'r', createroot)
  }
  function createroot (err, fd) {
    if (err && err.code=='ENOENT') {
      mkdirp(rootpath, createproject)
    } else {
      callback(RootExistsError(rootpath))
    }
  }
  function createproject (err) {
    if (err) {
      callback(err)
    } else {
      process.chdir(rootpath)
      var paths = traverse(json).paths()
      scaffold(paths, function (error) {
        process.chdir('..')
        if (error) {
          rimraf(rootpath, function (err) {
            if (err) throw err
            callback(error)
          })
        } else {
          callback()
        }
      })
    }
  }

  function createFile (path, filename, next) {
    var filepath = path.join('')
    if (filepath.indexOf('..') !== -1) {
      next(IllegalFileError(filepath))
    } else {
      var extension = filename.split('.')[1]
      var content = getval(json, path.join(':'), ':')
      try {
        if (extension) {
          content = transforms[extension](content)
        }
        touch('./'+filepath, { f: true }, function (err) {
          if (err) throw err
          fs.createWriteStream('./'+filepath).end(content)
          next()
        })
      } catch (e) {
        next(UnsupportedFileExtensionError(extension))
      }
    }
  }
  function createDirectory (path, next) {
    var dirpath  = path.join('')
    if (dirpath.indexOf('..') !== -1) {
      next(IllegalDirectoryError(dirpath))
    } else {
      mkdirp('./'+path.join(''), function (err) {
        if (err) throw err
        next()
      })
    }
  }
  function scaffold (paths, done) {
    var path = paths.shift()
    if (path) {
      var leaf = path[path.length-1]
      if (leaf) {
        var isFile = leaf[leaf.length-1] !== '/'
        if (isFile) {
          createFile(path, leaf, next)
        } else {
          createDirectory(path, next)
        }
      } else {
        scaffold(paths, done)
      }
    } else {
      done()
    }
    function next (error) {
      if (error) {
        done(error)
      } else {
        scaffold(paths, done)
      }
    }
  }
}

function fs2json (rootpath, callback) {
  var json
  // @TODO: convert binary data to base64
  // @TODO: Check https://www.npmjs.com/package/folderson
  // @TODO: Check https://github.com/dwieeb/node-jsondir
  // @TODO: Check https://github.com/jokeyrhyme/json-fs
  console.log('@TODO: implement fs2json')
  callback(null, json)
}

function IllegalFileError (filepath) {
  return new Error('".." not allowed in filepath: ' + filepath)
}
function IllegalDirectoryError (dirpath) {
  return new Error('".." not allowed in directorypath: ' + dirpath)
}
function IllegalRootError (rootpath) {
  return new Error('".." not allowed in rootpath: ' + rootpath)
}
function UnsupportedFileExtensionError (extension) {
  return new Error('extension not yet supported: ' + extension)
}
function RootExistsError (rootpath) {
  var msg = '"' + rootpath + '" already exists => choose different name'
  return new Error(msg)
}
