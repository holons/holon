
// NAMING CONVENTIONS
/* Templates Rules (using Sass placeholders) */
%template-name
%template-name--modifier-name
%template-name__sub-object
%template-name__sub-object--modifier-name


// COMPOSITION
// Describe: PAGES + TEMPLATES
// Besides our building blocks we need a way to describe 'page layout' in plain text
// using 'unique identifiers' of elements and blocks
//
// Blocks and elements constitute 'page content'
// 
// Besides simply being present on a page, their arrangement is also important.
// Blocks (or elements) may follow each other in a certain order.
// e.g. list of goods on a commerce website
// http://img-fotki.yandex.ru/get/9109/221798411.0/0_babcc_d935a8ec_XXL.png
// http://img-fotki.yandex.ru/get/6726/221798411.0/0_babd1_f14000fa_XL.png

// COMPOSITION
// At the highest level of a design, your blocks might be
// - your header block => likely include several blocks inside:
//   e.g. block (with logo block, tagline block)
//        block(navigation bar)
//        block (search field and button)
// - footer block
// - main content block
// - sidebar block
//
// Mark out "Blocks" a site consists of
// http://img-fotki.yandex.ru/get/9258/221798411.0/0_babd7_c4c0b5d6_XXL.png
// e.g. 'Head', 'Main Layout' and 'Foot block'.
//      'Head' consists of 'Logo', 'Search', 'Auth' and 'Menu'
//      'Main Layout' contains 'Page Title' and a 'Text'
// => Giving each part of the page a name is very useful when it comes to team communication.
// e.g. "make the 'Head' bigger" or "create a page without a 'Search' form in the 'Head'" or "make 'Auth Block' animated"


//@@@@@@@@@@@@@@@@@
// NAMING CONVENTION STYLE - Benefits:
// 1. allows better Collaboration (unambiguous communication across developers)
//    => Use Convention across: CSS, JS, TPL, HTML, etc...
//    => Operate on same TERMS
// e.g. 
.blockName-elementName {}   // CSS class of an element
.block-name__element-name {}// CSS class of an element
.b-popup {}                 // CSS class of a block
.b-popup__content {}        // CSS class of an element
.b-popupa_theme_yellow {}   // CSS class of a modifier
// 2. allow helper tools
// [JavaScript Developers Process POV]
//    => Instead of using 'class selectors' directly to find DOM elements, a special helper library may be used:
$('menu__item').click( … );
$('menu__item').addClass('menu__item_state_current');
$('menu').toggle('menu_size_big').toggle('menu_size_small');
// The naming convention for CSS classes of blocks and elements can change in the course of time.
// Using special JavaScript functions to access BLOCKs and ELEMENTs + use of MODIFIERs
// enable to change only these functions if the naming convention changes.
block('menu').elem('item').click( … );
block('menu').elem('item').setMod('state', 'current');
block('menu').toggleMod('size', 'big', 'small');
// [CSS Designers Process POV]
// => CSS for blocks and elements can be written in a pseudo language
// that compiles down to CSS according to the naming convention.
.menu {
  ...
  // ELEMENTs
  __item {
    // ELEMENT STATEs
    -state\=current {
      font-weight: bold;
    }
  }
  // BLOCK MODIFIERS
  --layout\=inline {
    display: inline;
  }
  // ELEMENT MODIFIERS
  __item--layout\=inline {
    display: inline-block;
    …
  }
}










//@@@@@@@@@@@@@@@@@
/// TEMPLATE PERSPECTIVE
a component might be a modal dialog box
- might have the site’s signature background gradient in the header
- might have a drop shadow around it
- might have a close button in the top right corner
- might be positioned fixed and centered vertically and horizontally.
=>As such they’re all templates, and together they comprise the modal component.
// Blocks and elements must be described in the input data
// => Each BLOCK has its own TEMPLATE
/*
<div class='b-menu'>
 <ul>
  <li class='b-menu__item'>
 </ul>
</div>
*/
.b-menu {
    padding:10px;
    border:1px solid #BADA55;
    background-color:#C0FFEE;
    -webkit-border-radius:4px;
       -moz-border-radius:4px;
            border-radius:4px;
}
    .b-menu__item{
        font-size:1.5rem;
        line-height:1;
        font-weight:bold;
        color:#BADA55;
        margin-right:-10px;
        margin-left: -10px;
        padding:0.25em;
    }
// e.g.
Each BEM entity is defined by an HTML tag and corresponding CSS classes.
    <div class="block-name">
        <i class="block-name__elem"></i>
        ...
    </div>
    <div class="block-name block-name_modifier">...</div>



// DOM TREE vs. BEM TREE
/*
The tabbed pane block includes tabs (b-tabbed-pane__tabs) and panels (b-tabbed-pane__panels) as its elements.
Both elements are applied to a single DOM node. This allows toggling of the panel's visual representation from
vertical to horizontal. http://bem.github.io/bem-method/images/tab-panel-v.png
*/
<div class="b-tabbed-pane b-tabbed-pane__tabs">
      ...
  </div>
<div class="b-tabbed-pane b-tabbed-pane__panels">
    ...
</div>
// horizontal tabbed pane
<table class="b-layout-table">
<tr>
    <td class="b-layout-table__column b-layout-table__column_side_left">
        <div class="b-tabbed-pane b-tabbed-pane__tabs">
            ...
        </div>
    </td>
    <td class="b-layout-table__column b-layout-table__column_side_right">
        <div class="b-tabbed-pane b-tabbed-pane__panels">
            ...
        </div>
    </td>
</tr>
</table>
/* BEM Tree (by analogy with DOM tree)
// This structure can also contain any number of custom data fields.
// => Final browser markup is generated by applying template transformations (using XSL or JavaScript) to a BEM tree.
// => If a developer needs to move a block to a different place on a page, he does so by changing the BEM tree.
//    Templates generate the final view themselves.
// => You can use any format to describe the BEM tree and any template engine.
// => We went with JSON as a page description format. It is then turned into HTML by a JS-based template engine BEMHTML.
<b:page>
  <b:head>
    <b:menu>
      …
    </b:menu>
    <e:column>
      <b:logo/>
    </e:column>
    <e:column>
      <b:search>
        <e:input/>
        <e:button>Search</e:button>
      </b:search>
    </e:column>
    <e:column>
      <b:auth>
        …
      </b:auth>
    <e:column>
  </b:head>
</b:page>
{
  block: 'page',
  content: {
    block: 'head',
    content: [
      { block: 'menu', content: … },
      {
        elem: 'column',
        content: { block: 'logo' }
      },
      {
        elem: 'column',
        content: [
          {
            block: 'search',
            content: [
              { elem: 'input' },
              { elem: 'button', content: 'Search' }
            ]
          }
        ]
      },
      {
        elem: 'column',
        content: {
          block: 'auth', content: …
        }
      }
    ]
  }
}
*/

