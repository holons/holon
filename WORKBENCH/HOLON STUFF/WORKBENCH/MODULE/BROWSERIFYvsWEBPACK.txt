BROWSERIFY vs WEBPACK

ARTICLES "browserify vs. webpack"
http://mattdesl.svbtle.com/browserify-vs-webpack

https://twitter.com/spikebrehm/status/477918363100786688
https://news.ycombinator.com/item?id=8091120
////////////////////////////////////////////////////////////////////


Use Watchify.
All that stuffing about with externals is nice, but watchify makes it all irrelevant.

If it's a big project, yes. If it's small, no.
My experience is that gulp-inject style solutions do NOT scale. Browserify does.


The fastest way to build with browserify is to separate it into two builds - vendor/app - and if I'm only rebuilding my own code, even with transforms the build time is the same as anything else in gulp.

I usually make 2 bundles with Browserify: vendor and app. Vendor rarely changes so it doesn't need to rebuild all that stuff every time.
http://benclinkinbeard.com/posts/external-bundles-for-faster-browserify-builds/


////////////////////////////////////////////
BROWSERIFY STUFF (vs. WebPack)
https://github.com/substack/node-browserify#browser-field
https://github.com/substack/factor-bundle
////////////////////////////////////////////





WEBPACK

http://webpack.github.io/
http://webpack.github.io/docs/library-and-externals.html
https://github.com/webpack/webpack
https://github.com/nicolashery/example-build-workflow#webpack-bundler
https://github.com/petehunt/webpack-howto
http://webpack.github.io/docs/usage-with-gulp.html
http://webpack.github.io/docs/library-and-externals.html
http://webpack.github.io/
http://webpack.github.io/docs/webpack-for-browserify-users.html
http://webpack.github.io/docs/

http://webpack.github.io/docs/what-is-webpack.html
http://webpack.github.io/docs/tutorials/getting-started/


https://github.com/webpack/docs/wiki/comparison
http://slides.com/davidmason/packaging-commonjs-for-the-browser



http://browserify.org/
https://github.com/substack/browserify-handbook
browserify
https://www.npmjs.org/package/factor-bundle

https://gist.github.com/Raynos/10243323





BROWSERIFY
///////////////
http://browserify.org/articles.html

http://esa-matti.suuronen.org/blog/2013/03/22/journey-from-requirejs-to-browserify
http://calvinmetcalf.com/post/61957209713/2013-a-client-side-package-manager-oddyssey
http://superbigtree.tumblr.com/post/58075340096/my-strategy-for-client-side-package-managers-choosing
http://www.forbeslindesay.co.uk/post/44144487088/browserify-vs-component




https://gist.github.com/AutoSponge/68d12a832c86ed317406
https://www.npmjs.org/package/watchify

//////

UMD, CMJSvsAMD
http://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html

MY QUESTION: Howto use/load AMD Module with browserify?
=> deamdify 		https://npmjs.org/package/deamdify
=> deglobalify 		https://npmjs.org/package/deglobalify
=> es6ify 			https://npmjs.org/package/es6ify
=> decomponentify 	https://npmjs.org/package/decomponentify
=> debowerify		https://npmjs.org/package/debowerify

BROWSERIFY UNIVERSALLY
You can use multiple transforms in one swoop and have universal module access:
npm install deamdify es6ify deglobalify
browserify -t deamdify -t es6ify -t deglobalify main.js -o bundle.js
////////////////////////////////////////////////////////////////////////////////


You then notice that Browserify takes ten seconds to build and you spend an eternity waiting for your tests to re-run each time after you hit save in watch mode. How can you improve things?

==> SHIM IT ==> Skips files in which u tell, that there is no require() calls
Instead what you can do is use browserify-shim, which is automatically included in grunt-browserify,
//...
browserify: {
  main: {
    "dist/main.js": ["src/main.js"],
    shim: {
      jquery: {
        path: "node_modules/jquery/jquery.js"
        exports: "$"
      }
    }
  }
}
//...

Every module in the bundle can just var $ = require("jquery"). Also note that window.$ and window.jQuery will still be created in this case unless you call jQuery.noConflict(true) somewhere in your code.



// If a shimmed module relies on other modules you can just add a depends object to the config:
shim: {
  jquery: {path: "node_modules/jquery/jquery.js", exports: "$"},
  backbone: {
    path: "app/vendor/backbone-1.1.js",
    exports: "Backbone",
    depends: {
      lodash: "_",
      jquery: "jQuery"
    }
  },

http://aeflash.com/2014-03/a-year-with-browserify.html

